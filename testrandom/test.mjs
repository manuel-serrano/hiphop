/*=====================================================================*/
/*    serrano/prgm/project/hiphop/hiphop/testrandom/test.mjs           */
/*    -------------------------------------------------------------    */
/*    Author      :  robby findler & manuel serrano                    */
/*    Creation    :  Tue May 27 14:05:43 2025                          */
/*    Last change :  Tue May 27 17:38:58 2025 (serrano)                */
/*    Copyright   :  2025 robby findler & manuel serrano               */
/*    -------------------------------------------------------------    */
/*    HipHop Random Testing entry point.                               */
/*=====================================================================*/
import * as hh from "../lib/hiphop.js";
import { prop } from "./prop.mjs";
import { gen } from "./gen.mjs";
import { shrinker } from "./shrink.mjs";
import { jsonToHiphop } from "./dump.mjs";

/*---------------------------------------------------------------------*/
/*    shrinkProgram ...                                                */
/*---------------------------------------------------------------------*/
function shrinkProgram(prog) {
   const progs = shrinker(prog);

   if (progs.length === 0) {
      return prog;
   } else {
      for (let i = 0; i < progs.length; i++) {
	 if (prop(progs[i]).status === "failure") {
	    // we still have an error
	    return shrinkProgram(progs[i]);
	 }
      }
      return prog;
   }
}

/*---------------------------------------------------------------------*/
/*    findBug ...                                                      */
/*---------------------------------------------------------------------*/
function findBug(out, iterCount = 1000) {
   for (let i = 0; i < iterCount; i++) {
      const events = Array.from({length: 10}).map(i => { return {}; });
      const prog = gen();
      console.error("###", i);
      console.error("prgm=", jsonToHiphop(prog.tojson()));
      
      const res = prop(prog);

      if (res.status === "failure") {
	 // an error occured
	 //console.error(res);
	 const shrunk = shrinkProgram(prog);
	 const sres = prop(shrunk);
	 const headers = [
	    `${res.machines[0].name()}(${res.status}) / ${res.machines[1].name()}(${sres.status})`,
	    sres.msg
	 ];

	 out(res.machines[1], headers, shrunk, events);
	 process.exit(0);
      } else {
	 ;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    main                                                             */
/*---------------------------------------------------------------------*/
function main(argv) {
   if (argv[2] === "src") {
      findBug((mach, headers, prog, events) => {
	 console.log(`// generated by testrandom
${headers.map(h => `// ${h}\n`).join("")}
import * as hh from "@hop/hiphop";
const events = ${JSON.stringify(events)};
const prg = hiphop ${jsonToHiphop(prog.tojson(), 0)}
const opts = { name: "${mach.name()}", compiler: "${mach.compiler}", unrollLoop: ${mach.unrollLoop}, syncReg: ${mach.syncReg}, verbose: ${mach.verbose || 0} };

export const mach = new hh.ReactiveMachine(prg, opts);
mach.outbuf = "";
events.forEach((e, i) => mach.outbuf += (i + ': ' + JSON.stringify(mach.react(e)) + '\\n'));
console.log(mach.outbuf);`);
	 console.log("");
console.log(`// HIPHOP_SYNCREG=false HIPHOP_REINCARNATION=true xHIPHOP_SWEEP=-1 HIPHOP_COMPILER=int HIPHOP_UNROLL=false  NODE_OPTIONS="--enable-source-maps --no-warnings --loader @hop/hiphop/lib/hiphop-loader.mjs" node bug.hh.mjs`);
console.log(`// HIPHOP_SYNCREG=${mach.syncReg ? "true" : "false"} HIPHOP_REINCARNATION=${mach.compiler === "new" ? "false" : "true"} xHIPHOP_SWEEP=-1 HIPHOP_COMPILER=${mach.compiler} HIPHOP_UNROLL=${mach.unrollLoop ? "true" : "false"} NODE_OPTIONS="--enable-source-maps --no-warnings --loader @hop/hiphop/lib/hiphop-loader.mjs" node bug.hh.mjs`);
      });
   } else {
      findBug((mach, prog, header, events) => {
	 console.log(prog);
	 console.log(JSON.stringify(events));
      });
   }
}

/*---------------------------------------------------------------------*/
/*    toplevel ...                                                     */
/*---------------------------------------------------------------------*/
main(process.argv);
