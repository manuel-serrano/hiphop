/*=====================================================================*/
/*    serrano/prgm/project/hiphop/hiphop/testrandom/test.mjs           */
/*    -------------------------------------------------------------    */
/*    Author      :  robby findler & manuel serrano                    */
/*    Creation    :  Tue May 27 14:05:43 2025                          */
/*    Last change :  Tue May 27 17:00:52 2025 (serrano)                */
/*    Copyright   :  2025 robby findler & manuel serrano               */
/*    -------------------------------------------------------------    */
/*    HipHop Random Testing entry point.                               */
/*=====================================================================*/
import * as hh from "../lib/hiphop.js";
import { prop } from "./prop.mjs";
import { gen } from "./gen.mjs";
import { shrinker } from "./shrink.mjs";

/*---------------------------------------------------------------------*/
/*    shrinkProgram ...                                                */
/*---------------------------------------------------------------------*/
function shrinkProgram(prog) {
   const progs = shrinker(prog);

   if (progs.length === 0) {
      return prog;
   } else {
      for (let i = 0; i < progs.length; i++) {
	 if (prop(progs[i])) {
	    // we still have an error
	    return shrinkProgram(progs[i]);
	 }
      }
      return prog;
   }
}

/*---------------------------------------------------------------------*/
/*    findBug ...                                                      */
/*---------------------------------------------------------------------*/
function findBug(out) {
   for (let i = 0; i < 10; i++) {
      const events = Array.from({length: 10}).map(i => { return {}; });
      const prog = gen();
      //console.log(JSON.stringify(prog.dump()));
      console.error("###", i);
      const res = prop(prog);
      if (res) {
	 // an error occured
	 //console.error(res);
	 const shrunk = shrinkProgram(prog);
	 //const shrunk = prog;
	 out(prop(shrunk), events);
	 console.log("// unshrunk ----------------");
	 out(res, events);
	 process.exit(0);
      } else {
	 ;
      }
   }
}

/*---------------------------------------------------------------------*/
/*    main                                                             */
/*---------------------------------------------------------------------*/
function main(argv) {
   if (argv[2] === "src") {
      findBug((prog, events) => {
	 console.log(`// generated by testrandom
import * as hh from "@hop/hiphop";
const events = ${JSON.stringify(events)};
const prg = hiphop ${prog}

export const mach = new hh.ReactiveMachine(prg);
mach.outbuf = "";
events.forEach((e, i) => mach.outbuf += (i + ': ' + JSON.stringify(mach.react(e)) + '\\n'));
console.log(mach.outbuf);`);
	 console.log("");
	 console.log('// HIPHOP_SYNCREG=true HIPHOP_REINCARNATION=false xHIPHOP_SWEEP=-1 HIPHOP_COMPILER=new HIPHOP_UNROLL=false  NODE_OPTIONS="--enable-source-maps --no-warnings --loader @hop/hiphop/lib/hiphop-loader.mjs" node bug.hh.mjs');
      });
   } else {
      findBug((prog, events) => {
	 console.log(prog);
	 console.log(JSON.stringify(events));
      });
   }
}

/*---------------------------------------------------------------------*/
/*    toplevel ...                                                     */
/*---------------------------------------------------------------------*/
main(process.argv);
